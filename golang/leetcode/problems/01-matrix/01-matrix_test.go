package n01_matrix

import (
	"golang/assert"
	"testing"
)

func TestCase1(t *testing.T) {
	matrix := [][]int{
		{0, 0, 0},
		{0, 1, 0},
		{0, 0, 0},
	}

	expected := [][]int{
		{0, 0, 0},
		{0, 1, 0},
		{0, 0, 0},
	}

	actual := updateMatrix(matrix)

	assert.EqualMultiDimensional(t, expected, actual)
}

func TestCase2(t *testing.T) {
	matrix := [][]int{
		{0, 0, 0},
		{0, 1, 0},
		{1, 1, 1},
	}

	expected := [][]int{
		{0, 0, 0},
		{0, 1, 0},
		{1, 2, 1},
	}

	actual := updateMatrix(matrix)

	assert.EqualMultiDimensional(t, expected, actual)
}

func TestCase3(t *testing.T) {
	matrix := [][]int{
		{0, 0, 1},
		{0, 1, 1},
		{1, 1, 1},
	}

	expected := [][]int{
		{0, 0, 1},
		{0, 1, 2},
		{1, 2, 3},
	}

	actual := updateMatrix(matrix)

	assert.EqualMultiDimensional(t, expected, actual)
}

func TestCase4(t *testing.T) {
	matrix := [][]int{
		{1, 1, 0, 0, 1, 0, 0, 1, 1, 0},
		{1, 0, 0, 1, 0, 1, 1, 1, 1, 1},
		{1, 1, 1, 0, 0, 1, 1, 1, 1, 0},
		{0, 1, 1, 1, 0, 1, 1, 1, 1, 1},
		{0, 0, 1, 1, 1, 1, 1, 1, 1, 0},
		{1, 1, 1, 1, 1, 1, 0, 1, 1, 1},
		{0, 1, 1, 1, 1, 1, 1, 0, 0, 1},
		{1, 1, 1, 1, 1, 0, 0, 1, 1, 1},
		{0, 1, 0, 1, 1, 0, 1, 1, 1, 1},
		{1, 1, 1, 0, 1, 0, 1, 1, 1, 1},
	}

	expected := [][]int{
		{2, 1, 0, 0, 1, 0, 0, 1, 1, 0},
		{1, 0, 0, 1, 0, 1, 1, 2, 2, 1},
		{1, 1, 1, 0, 0, 1, 2, 2, 1, 0},
		{0, 1, 2, 1, 0, 1, 2, 3, 2, 1},
		{0, 0, 1, 2, 1, 2, 1, 2, 1, 0},
		{1, 1, 2, 3, 2, 1, 0, 1, 1, 1},
		{0, 1, 2, 3, 2, 1, 1, 0, 0, 1},
		{1, 2, 1, 2, 1, 0, 0, 1, 1, 2},
		{0, 1, 0, 1, 1, 0, 1, 2, 2, 3},
		{1, 2, 1, 0, 1, 0, 1, 2, 3, 4},
	}

	actual := updateMatrix(matrix)

	assert.EqualMultiDimensional(t, expected, actual)
}

func TestCase5(t *testing.T) {
	matrix := [][]int{
		{1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1},
		{1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1},
		{1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1},
		{1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1},
		{0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1},
		{1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0},
		{1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1},
		{1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1},
		{0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1},
		{1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0},
		{1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1},
		{0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1},
		{0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1},
		{1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1},
		{1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0},
		{1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1},
		{1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0},
		{1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1},
		{1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0},
		{1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1},
		{0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1},
		{1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1},
		{0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0},
		{1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1},
		{1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0},
		{1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1},
		{0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0},
	}

	expected := [][]int{
		{4, 3, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 1, 1, 0, 1, 2},
		{3, 2, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 2, 2, 1, 1, 0, 1, 1, 1, 2, 1, 0, 1, 0, 0, 1},
		{2, 3, 2, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 2},
		{1, 2, 1, 1, 1, 0, 1, 1, 2, 2, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 2, 1, 0, 0, 1},
		{0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1},
		{1, 0, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 2, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0},
		{2, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 2, 1, 2, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1},
		{1, 2, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 2, 1, 2, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1},
		{0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 2, 2, 1, 0, 1, 0, 1, 1, 1, 2, 1, 0, 0, 1, 0, 1},
		{1, 1, 0, 0, 1, 2, 1, 0, 1, 1, 2, 2, 1, 2, 3, 2, 1, 1, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 1, 1},
		{2, 2, 1, 1, 1, 2, 1, 1, 0, 1, 2, 2, 1, 2, 2, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0},
		{1, 2, 2, 1, 0, 1, 0, 0, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1},
		{0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 0, 1, 0, 1, 2, 1, 1, 0, 1, 0, 0, 0, 1},
		{0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 2, 1, 1, 1, 2, 1, 0, 1, 0, 0, 1, 1, 1, 2},
		{1, 2, 2, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 2, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1},
		{2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 2, 3, 2, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0},
		{2, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 2, 2, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1},
		{1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 2, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 2, 1, 0},
		{2, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 2, 2, 1, 0, 1, 0, 0, 0, 0, 1, 2, 1},
		{2, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 2, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0},
		{1, 0, 0, 1, 2, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 2, 1, 0, 1, 1, 1, 2, 1, 0, 1, 1},
		{0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1},
		{1, 2, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 2, 1, 1, 0, 1, 2, 1, 0, 1, 1, 1, 2, 1, 2, 1, 2},
		{1, 1, 0, 0, 1, 2, 2, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 2, 2, 1, 0, 1, 1, 0, 1, 1, 2, 2, 1},
		{0, 0, 0, 1, 2, 3, 3, 2, 1, 0, 1, 1, 1, 0, 0, 1, 1, 2, 3, 2, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0},
		{1, 1, 0, 1, 1, 2, 2, 1, 2, 1, 1, 0, 1, 1, 0, 0, 1, 2, 2, 1, 0, 1, 0, 0, 0, 0, 0, 1, 2, 1},
		{1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 2, 2, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0},
		{2, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 2, 1, 2, 2, 1, 0, 0, 1, 1, 2, 2, 1, 1, 2, 2, 1},
		{1, 2, 2, 1, 1, 0, 0, 1, 2, 1, 2, 1, 2, 2, 1, 0, 1, 1, 0, 1, 1, 2, 1, 1, 1, 0, 0, 1, 2, 1},
		{0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 2, 2, 1, 0, 0, 1, 2, 1, 2, 2, 1, 0, 0, 0, 1, 1, 0, 1, 0},
	}

	actual := updateMatrix(matrix)

	assert.EqualMultiDimensional(t, expected, actual)
}
